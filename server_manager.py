# server_manager.py
import paramiko
import json

def add_vpn_user(server_info: dict, new_uuid: str, client_email: str) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ VPN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Xray —á–µ—Ä–µ–∑ SSH.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç—Å—è.
    –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç, –∏ Xray –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.
    """
    try:
        print(f"üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server_info['host']} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {server_info['username']}...")
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(
            hostname=server_info["host"],
            port=server_info["port"],
            username=server_info["username"],
            key_filename=server_info["private_key_path"],
            timeout=10
        )
        print("‚úÖ SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        sftp = ssh.open_sftp()
        remote_config_path = "/usr/local/etc/xray/config.json"

        with sftp.open(remote_config_path, "r") as config_file:
            config_data = json.load(config_file)
        print("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Xray —Å —Å–µ—Ä–≤–µ—Ä–∞.")

        # –ò—â–µ–º inbound —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º "vless"
        target_inbound = None
        if "inbounds" in config_data:
            for inbound in config_data["inbounds"]:
                if inbound.get("protocol") == "vless":
                    target_inbound = inbound
                    break
        else:
            if config_data.get("protocol") == "vless":
                target_inbound = config_data

        if target_inbound is None:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω inbound —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º 'vless'!")
            ssh.close()
            return False

        if "settings" not in target_inbound or "clients" not in target_inbound["settings"]:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'settings/clients'!")
            ssh.close()
            return False

        clients = target_inbound["settings"]["clients"]

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ email, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        new_clients = [client for client in clients if client.get("email") != client_email]
        if len(clients) != len(new_clients):
            print(f"‚ôª –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è {client_email}.")
        target_inbound["settings"]["clients"] = new_clients

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_client = {
            "id": new_uuid,
            "email": client_email,
            "flow": "xtls-rprx-vision"  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        }
        target_inbound["settings"]["clients"].append(new_client)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π VPN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {new_client}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_config_path = "/tmp/config_temp.json"
        with sftp.open(temp_config_path, "w") as temp_file:
            json.dump(config_data, temp_file, indent=4)
        print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.")

        sftp.close()

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –º–µ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Xray
        commands = [
            f"sudo mv {temp_config_path} {remote_config_path}",
            "sudo systemctl restart xray"
        ]
        for cmd in commands:
            stdin, stdout, stderr = ssh.exec_command(cmd)
            exit_status = stdout.channel.recv_exit_status()
            if exit_status != 0:
                error_msg = stderr.read().decode()
                print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{cmd}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {error_msg}")
                ssh.close()
                return False

        ssh.close()
        print("üöÄ Xray —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ VPN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


def remove_vpn_user(server_info: dict, client_email: str) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç VPN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray —á–µ—Ä–µ–∑ SSH –ø–æ email.
    –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –∏ Xray –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.
    """
    try:
        print(f"üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server_info['host']} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_email}...")
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(
            hostname=server_info["host"],
            port=server_info["port"],
            username=server_info["username"],
            key_filename=server_info["private_key_path"],
            timeout=10
        )
        print("‚úÖ SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        sftp = ssh.open_sftp()
        remote_config_path = "/usr/local/etc/xray/config.json"

        with sftp.open(remote_config_path, "r") as config_file:
            config_data = json.load(config_file)
        print("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Xray —Å —Å–µ—Ä–≤–µ—Ä–∞.")

        # –ò—â–µ–º inbound —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º "vless"
        target_inbound = None
        if "inbounds" in config_data:
            for inbound in config_data["inbounds"]:
                if inbound.get("protocol") == "vless":
                    target_inbound = inbound
                    break
        else:
            if config_data.get("protocol") == "vless":
                target_inbound = config_data

        if target_inbound is None:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω inbound —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º 'vless'!")
            ssh.close()
            return False

        if "settings" not in target_inbound or "clients" not in target_inbound["settings"]:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'settings/clients'!")
            ssh.close()
            return False

        clients = target_inbound["settings"]["clients"]
        new_clients = [client for client in clients if client.get("email") != client_email]
        if len(clients) == len(new_clients):
            print(f"‚Ñπ –ö–ª–∏–µ–Ω—Ç —Å email {client_email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        else:
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å email {client_email}.")
        target_inbound["settings"]["clients"] = new_clients

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_config_path = "/tmp/config_temp.json"
        with sftp.open(temp_config_path, "w") as temp_file:
            json.dump(config_data, temp_file, indent=4)
        print("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.")

        sftp.close()

        commands = [
            f"sudo mv {temp_config_path} {remote_config_path}",
            "sudo systemctl restart xray"
        ]
        for cmd in commands:
            stdin, stdout, stderr = ssh.exec_command(cmd)
            exit_status = stdout.channel.recv_exit_status()
            if exit_status != 0:
                error_msg = stderr.read().decode()
                print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{cmd}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {error_msg}")
                ssh.close()
                return False

        ssh.close()
        print("üöÄ Xray —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ VPN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False